{"version":3,"file":"schema.js","sourceRoot":"","sources":["../src/schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options, Enum, Message, Extends, Service, Enums, EnumValue, Messages, RPC, MessageField } from \"./parser-internals\";\n\nconst indent: ((s: string) => string) = s => s.replace(/^/gm, '  ')\nexport class Schema extends Options {\n\tsyntax: 2 | 3 = 3;\n\tpackage: string = '';\n\timports: string[] = [];\n\tenums: Enum[] = [];\n\tmessages: Message[] = [];\n\textends: Extends[] = [];\n\tservices: Service[] = [];\n\toptimize_for: \"SPEED\" | \"CODE_SIZE\" | \"LITE_RUNTIME\" | \"AUTO\" = \"AUTO\";\n\ttoString() {\n\t\treturn '' +\n`syntax = \"proto${this.syntax}\";\n${this.package && `package ${this.package};`}\n${this.options.size === 0 ? '' : onOptions(this)}\n${onEnums(this)}\n${onMessages(this)}\n${onServices(this)}\n`\n\t}\n}\nfunction onOptions<T extends Options>({options}: T): string {\n\tlet s = ''\n\tfor (const [k, v] of options)\n\t\ts += `\\noption ${k.includes('.') ? `(${k})` : k} = ${v};`\n\n\treturn s;\n}\nfunction onOptionsInline<T extends Options>({options}: T) {\n\tif (options.size === 0) return ''\n\tlet a: string[] = []\n\tfor (const [k, v] of options)\n\t\ta.push(`${k} = ${v}`)\n\treturn ` [${a.join(', ')}]`\n}\nfunction onEnums<T extends Enums>({enums}: T): string {\n\tlet s = ''\n\tfor (const {name, values} of enums) {\n\t\ts += `\\nenum ${name} {${indent(onEnumValues(values))}\\n}`\n\t}\n\treturn s\n}\nfunction onEnumValues(a: EnumValue[]) {\n\tlet s = ''\n\tfor (const e of a)\n\t\ts += `\\n${e.name} = ${e.value}${onOptionsInline(e)};`\n\treturn s\n}\nfunction onMessages<T extends Messages>({messages}: T) {\n\tlet s = ''\n\tfor (const msg of messages) {\n\t\ts += `\\nmessage ${msg.name} {${\n\t\t\tindent(\n\t\t\t\tonOptions(msg) +\n\t\t\t\tonEnums(msg) +\n\t\t\t\tonMessages(msg) +\n\t\t\t\tonFields(msg.fields)\n\t\t\t\t)\n\t\t\t}\\n}`\n\t}\n\treturn s\n}\nfunction onFieldValues(fields: MessageField[]) {\n\tlet s = ''\n\tfor (const f of fields)\n\t\ts += `\\n${f.required ? 'required ' : f.repeated ? 'repeated ' : (f.optional && !f.oneof) ? 'optional ' : ''}${f.type === 'map' && f.map ? `map<${f.map.from}, ${f.map.to}>` : f.type} ${f.name} = ${f.tag}${onOptionsInline(f)};`\n\treturn s;\n}\nfunction onFields(fields: MessageField[]) {\n\tlet s = ''\n\ts += onFieldValues(fields.filter(v => !v.oneof))\n\tconst oneofs = fields.filter(v => Boolean(v.oneof)).reduce((a, v) => {\n\t\t(a[v.oneof] || (a[v.oneof] = [])).push(v);\n\t\treturn a\n\t}, {} as {[s: string]: MessageField[]})\n\tfor (const oneof in oneofs)\n\t\ts += `\\noneof ${oneof} {${indent(onFieldValues(oneofs[oneof]))}\\n}`\n\treturn s\n}\nfunction onRPCs(rpcs: RPC[]) {\n\tlet s = ''\n\tfor (const rpc of rpcs)\n\t\ts += `\\nrpc (${\n\t\t\trpc.client_streaming ? 'stream ' : ''\n\t\t}${rpc.input_type}) returns (${\n\t\t\trpc.server_streaming ? 'stream ' : ''\n\t\t}${rpc.output_type})${\n\t\t\trpc.options.size ? ` {${indent(onOptions(rpc))}\\n}` : ''\n\t\t};`\n\n\treturn s;\n}\nfunction onServices({services}: Schema) {\n\tlet s = ''\n\tfor (const {name, methods} of services)\n\t\ts += `\\nservice ${name} {${indent(onRPCs(methods))}\\n}`\n\treturn s\n}\n"]}