{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":";;AAAA,aAAa;AACb,mCAAgC;AAChC,2BAAkC;AAClC,+BAAsC;AAEtC,mCAA2D;AAC3D,OAAO,CAAC,GAAG,CAAC,aAAE,CAAC,CAAA;AAGf,MAAM,OAAO,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,WAAI,CAAC,SAAS,EAAE,kBAAkB,EAAE,eAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/E,MAAM,KAAK,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,aAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACrE,MAAM,KAAK,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,aAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,aAAK,CAAC,CAAA;AAChE,YAAY;AACZ,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAE,EAAE;IAC9B,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;IACrB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,KAAK,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAA;AAChE,CAAC,CAAA;AACD,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC;IAC1B,SAAS;IACT,uBAAuB;CACvB,CAAC,CAAA;AACF,KAAK,UAAU,KAAK;IACnB,IAAI,GAAG,GAAG,MAAM,aAAE,CAAC,OAAO,CAAC,WAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAA;IAE/D,KAAK,MAAM,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,eAAQ,CAAC,eAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE;QACnF,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QACnB,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACzB,IAAI,GAAG,GAAiB,IAAI,EAAE,EAAE,GAAkB,IAAI,CAAC;YACvD,IAAI;gBAAE,EAAE,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAA;aAAE;YAClD,OAAO,CAAC,EAAE;gBAAC,GAAG,GAAG,CAAC,CAAA;aAAC;YACnB,IAAI,GAAG;gBAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;iBACtB;gBACJ,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;gBACjB,MAAM,IAAI,cAAc,CAAC,qCAAqC,CAAC,CAAA;aAC/D;SACD;aAAM;YACN,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAA;YACnC,IAAI,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,CAAA;YACnB,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAA;YAC7B,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAA;YAC7B,wBAAiB,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,IAAI,mCAAmC,CAAC,CAAA;YACpE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;SACzB;QACD,OAAO,CAAC,QAAQ,EAAE,CAAA;KAClB;AACF,CAAC;AAED,KAAK,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA","sourcesContent":["//@ts-nocheck\nimport { parse } from \"./parse\";\nimport {promises as fs} from 'fs';\nimport { join, basename } from 'path';\nimport { Schema } from \"./schema\";\nimport {deepStrictEqual as deep_strict_equal} from 'assert'\nconsole.log(fs)\n\n\nconst fixture = (p: string) => join(__dirname, '../test/fixtures', basename(p))\nconst rjson = (p: string) => fs.readFile(p, 'utf-8').then(JSON.parse)\nconst rpbuf = (p: string) => fs.readFile(p, 'utf-8').then(parse)\n//@ts-ignore\nconst fixtures = (p: string) => {\n\tconst pf = fixture(p)\n\treturn Promise.all([rjson(pf + '.json'), rpbuf(pf + '.proto')])\n}\nconst will_error = new Set([\n\t'no-tags',\n\t'pheromon-trajectories'\n])\nasync function tests() {\n\tlet dir = await fs.readdir(join(__dirname, '../test/fixtures'))\n\n\tfor (const file of new Set(dir.map(v => basename(basename(v, '.json'), '.proto')))) {\n\t\tconsole.group(file)\n\t\tif (will_error.has(file)) {\n\t\t\tlet err: Error | null = null, rp: Schema | null = null;\n\t\t\ttry { rp = await rpbuf(fixture(file + '.proto')) }\n\t\t\tcatch (e) {err = e}\n\t\t\tif (err) console.error(err)\n\t\t\telse {\n\t\t\t\tconsole.error(rp)\n\t\t\t\tthrow new ReferenceError('Expected error, got schema instead.')\n\t\t\t}\n\t\t} else {\n\t\t\tconst [j, p] = await fixtures(file)\n\t\t\tlet pj = p.toJSON()\n\t\t\tconsole.dir(p, {depth: null})\n\t\t\tconsole.dir(j, {depth: null})\n\t\t\tdeep_strict_equal(j, pj, `${file} must be equal to its JSON value.`)\n\t\t\tconsole.log(p.toString())\n\t\t}\n\t\tconsole.groupEnd()\n\t}\n}\n\ntests().catch(console.error).then(console.groupEnd)\n"]}