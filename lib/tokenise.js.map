{"version":3,"file":"tokenise.js","sourceRoot":"","sources":["../src/tokenise.ts"],"names":[],"mappings":"AAAA,MAAM,IAAI,GAA4B,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;AAC3E,MAAM,UAAU,GAAG,CAAC,EAAU,EAAU,EAAE;IACzC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACzB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvC,CAAC,CAAA;AACD,MAAM,mBAAmB,GAAG,GAA8B,EAAE;IAC3D,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,OAAO,EAAE,CAAC,EAAE;QACX,QAAQ,EAAE,EAAE;YACX,KAAK,IAAI;gBAAE,MAAM,GAAG,IAAI,CAAC;gBAAC,OAAO,KAAK,CAAC;YACvC,KAAK,IAAI;gBAAE,MAAM,GAAG,KAAK,CAAC;gBAAC,OAAO,KAAK,CAAC;YACxC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;SACxB;IACF,CAAC,CAAA;AACF,CAAC,CAAA;AACD,MAAM,mBAAmB,GAAG,GAAG,EAAE;IAChC,IAAI,GAAG,GAAG,EAAE,EACX,IAAI,GAAG,+BAA+B,EACtC,GAAG,GAAG,+BAA+B,CAAC;IACvC,OAAO,CAAC,MAAgB,EAAE,GAAW,EAAY,EAAE;QAClD,IAAI,GAAG,CAAC,MAAM,EAAE;YACf,GAAG,IAAI,GAAG,CAAA;YACV,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBAClB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;gBAChB,GAAG,GAAG,EAAE,CAAA;aACR;SACD;aAAM,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YAAE,GAAG,GAAG,GAAG,CAAA;;YAC/B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACrB,OAAO,MAAM,CAAA;IACd,CAAC,CAAA;AACF,CAAC,CAAA;AACD,MAAM,cAAc,GAAG,8BAA8B,CAAC;AACtD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAY,EAAE,CAAC,CAAC;KAChD,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC;KAC/B,KAAK,CAAC,UAAU,CAAC;KACjB,GAAG,CAAC,UAAU,CAAC;KACf,GAAG,CAAC,IAAI,CAAC;KACT,MAAM,CAAC,OAAO,CAAC;KACf,IAAI,CAAC,IAAI,CAAC;KACV,KAAK,CAAC,WAAW,CAAC;KAClB,MAAM,CAAC,mBAAmB,EAAE,CAAC;KAC7B,MAAM,CAAC,mBAAmB,EAAE,EAAE,EAAE,CAAC,CAAC;AACpC,eAAe,QAAQ,CAAC","sourcesContent":["const trim: ((s: string) => string) = Function.prototype.call.bind(''.trim)\nconst noComments = (ln: string): string => {\n\tlet i = ln.indexOf('//');\n\treturn i === -1 ? ln : ln.slice(0, i);\n}\nconst noMultiLineComments = (): ((tk: string) => boolean) => {\n\tlet inside = false;\n\treturn tk => {\n\t\tswitch (tk) {\n\t\t\tcase '/*': inside = true; return false;\n\t\t\tcase '*/': inside = false; return false;\n\t\t\tdefault: return !inside;\n\t\t}\n\t}\n}\nconst joinInternalStrings = () => {\n\tlet str = '',\n\t\tinit = /^(\"([^\"]|\\\\\")*|'([^']|\\\\')*)$/,\n\t\tend = /^(([^\"]|\\\\\")*\"|([^']|\\\\')*')$/;\n\treturn (tokens: string[], val: string): string[] => {\n\t\tif (str.length) {\n\t\t\tstr += val\n\t\t\tif (end.test(val)) {\n\t\t\t\ttokens.push(str)\n\t\t\t\tstr = ''\n\t\t\t}\n\t\t} else if (init.test(val)) str = val\n\t\telse tokens.push(val)\n\t\treturn tokens\n\t}\n}\nconst tokenRetriever = /([;,{}()=:[\\]<>]|\\/\\*|\\*\\/)/g;\nexport const tokenise = (s: string): string[] => s\n\t.replace(tokenRetriever, ' $1 ')\n\t.split(/[\\r\\n]+/g)\n\t.map(noComments)\n\t.map(trim)\n\t.filter(Boolean)\n\t.join('\\n')\n\t.split(/\\s+|\\n+/gm)\n\t.filter(noMultiLineComments())\n\t.reduce(joinInternalStrings(), []);\nexport default tokenise;\n"]}